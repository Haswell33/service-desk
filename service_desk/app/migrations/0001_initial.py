# Generated by Django 3.2.13 on 2022-06-28 05:17

import app.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0019_remove_group_role'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=75, unique=True)),
                ('first_name', models.CharField(max_length=75)),
                ('last_name', models.CharField(max_length=75)),
                ('display_name', models.CharField(max_length=75)),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('icon', models.ImageField(default='img/user/default-avatar.png', max_length=500, upload_to='F:\\Programs\\Repository\\Python\\Private\\service-desk2\\service_desk/media/img/user')),
                ('password', models.CharField(max_length=500)),
                ('manager', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(related_name='user_set', related_query_name='user', to='auth.Group')),
                ('permissions', models.ManyToManyField(related_name='user_set', related_query_name='user', to='auth.Permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file', models.FileField(blank=True, max_length=1000, null=True, upload_to=app.models.get_upload_path, validators=[app.models.validate_file_extension])),
                ('filename', models.CharField(blank=True, max_length=255)),
                ('size', models.IntegerField(blank=True, editable=False)),
                ('uploaded', models.DateTimeField(auto_now_add=True)),
                ('directory', models.CharField(blank=True, max_length=255)),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachment_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
                'db_table': 'attachment',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='AttachmentAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachmentassociation_attachment', to='app.attachment')),
            ],
            options={
                'db_table': 'attachment_association',
            },
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('env_type', models.CharField(blank=True, choices=[('service-desk', 'Service Desk'), ('software', 'Software')], max_length=50, null=True, verbose_name='Environment type')),
            ],
            options={
                'verbose_name': 'board',
                'verbose_name_plural': 'boards',
                'db_table': 'board',
            },
        ),
        migrations.CreateModel(
            name='BoardColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_title', models.CharField(max_length=255)),
                ('column_number', models.IntegerField(default=1)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.board')),
            ],
            options={
                'verbose_name': 'board column',
                'verbose_name_plural': 'board columns',
                'db_table': 'board_column',
                'ordering': ['column_number'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
                ('created', models.DateTimeField(blank=True, help_text='Date when comment created', verbose_name='Created')),
                ('updated', models.DateTimeField(blank=True, help_text='Date when comment has been recently changed', null=True, verbose_name='Updated')),
                ('author', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='comment_author', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'db_table': 'comment',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='CommentAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentassociation_comment', to='app.comment')),
            ],
            options={
                'db_table': 'comment_association',
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'label',
                'verbose_name_plural': 'labels',
                'db_table': 'label',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='LabelAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labelassociation_label', to='app.label')),
            ],
            options={
                'db_table': 'label_association',
            },
        ),
        migrations.CreateModel(
            name='Priority',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('step', models.IntegerField(default=1)),
                ('icon', models.ImageField(blank=True, max_length=500, upload_to='F:\\Programs\\Repository\\Python\\Private\\service-desk2\\service_desk/media/img/priority', validators=[django.core.validators.FileExtensionValidator])),
            ],
            options={
                'verbose_name': 'priority',
                'verbose_name_plural': 'priorities',
                'db_table': 'priority',
                'ordering': ['-step'],
            },
        ),
        migrations.CreateModel(
            name='Resolution',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'resolution',
                'verbose_name_plural': 'resolutions',
                'db_table': 'resolution',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SLAScheme',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('reaction_time', models.IntegerField(help_text='Time to reaction in minutes before escalation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(43200)])),
                ('resolve_time', models.IntegerField(help_text='Time to resolve in minutes before escalation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(43200)])),
                ('hour_range', models.CharField(max_length=5)),
            ],
            options={
                'verbose_name': 'SLA scheme',
                'verbose_name_plural': 'SLA schemes',
                'db_table': 'sla_scheme',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color', models.CharField(help_text='RGB color in HEX format', max_length=7)),
                ('resolution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='status_resolution', to='app.resolution')),
            ],
            options={
                'verbose_name': 'status',
                'verbose_name_plural': 'statuses',
                'db_table': 'status',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('count', models.PositiveIntegerField(default=0, editable=False, help_text='Number of tickets')),
                ('icon', models.ImageField(blank=True, max_length=500, upload_to='F:\\Programs\\Repository\\Python\\Private\\service-desk2\\service_desk/media/img/tenant', validators=[django.core.validators.FileExtensionValidator])),
                ('customers_board', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tenant_customers_board', to='app.board')),
                ('customers_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tenant_customers_group', to='auth.group')),
                ('developers_board', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tenant_developers_board', to='app.board')),
                ('developers_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tenant_developers_group', to='auth.group')),
                ('operators_board', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tenant_operators_board', to='app.board')),
                ('operators_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tenant_operators_group', to='auth.group')),
                ('sla', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.slascheme')),
            ],
            options={
                'verbose_name': 'tenant',
                'verbose_name_plural': 'tenants',
                'db_table': 'tenant',
                'ordering': ['id'],
                'permissions': [('view_customer_space', 'Manage tenant as customer'), ('view_operator_space', 'Manage tenant as operator'), ('view_developer_space', 'Manage tenant as developer')],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(editable=False, max_length=255, unique=True)),
                ('title', models.CharField(help_text='Summarize the ticket', max_length=255, verbose_name='Title')),
                ('description', tinymce.models.HTMLField(blank=True, help_text='Describe the ticket', null=True, verbose_name='Description')),
                ('escalated', models.BooleanField(default=False, editable=False, verbose_name='Escalated')),
                ('suspended', models.BooleanField(default=False, verbose_name='Suspended')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date when ticket has been created', null=True, verbose_name='Created date')),
                ('updated', models.DateTimeField(blank=True, editable=False, help_text='Date when ticket has been recently changed', null=True, verbose_name='Updated date')),
                ('slug', models.SlugField(blank=True, max_length=55)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_assignee', to=settings.AUTH_USER_MODEL, verbose_name='Assignee')),
                ('attachments', models.ManyToManyField(blank=True, through='app.AttachmentAssociation', to='app.Attachment', verbose_name='Attachments')),
                ('comments', models.ManyToManyField(blank=True, through='app.CommentAssociation', to='app.Comment', verbose_name='Comments')),
                ('labels', models.ManyToManyField(blank=True, through='app.LabelAssociation', to='app.Label', verbose_name='Labels')),
                ('priority', models.ForeignKey(default=3, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_priority', to='app.priority', verbose_name='Priority')),
            ],
            options={
                'verbose_name': 'ticket',
                'verbose_name_plural': 'tickets',
                'db_table': 'ticket',
                'ordering': ['-updated'],
            },
        ),
        migrations.CreateModel(
            name='Transition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55)),
                ('dest_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transition_dest_status', to='app.status')),
                ('src_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transition_src_status', to='app.status')),
            ],
            options={
                'verbose_name': 'transition',
                'verbose_name_plural': 'transitions',
                'db_table': 'transition',
                'ordering': ['src_status'],
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('env_type', models.CharField(choices=[('service-desk', 'Service Desk'), ('software', 'Software')], max_length=50, null=True, verbose_name='Environment type')),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.ImageField(blank=True, max_length=500, upload_to='F:\\Programs\\Repository\\Python\\Private\\service-desk2\\service_desk/media/img/type', validators=[django.core.validators.FileExtensionValidator])),
            ],
            options={
                'verbose_name': 'type',
                'verbose_name_plural': 'types',
                'db_table': 'type',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='TransitionAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transitionassociation_transition', to='app.transition')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transitionassociation_type', to='app.type')),
            ],
            options={
                'verbose_name': 'transition association',
                'verbose_name_plural': 'transition associations',
                'db_table': 'transition_association',
                'ordering': ['transition'],
                'unique_together': {('type', 'transition')},
            },
        ),
        migrations.AddField(
            model_name='transition',
            name='types',
            field=models.ManyToManyField(through='app.TransitionAssociation', to='app.Type'),
        ),
        migrations.CreateModel(
            name='TicketAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dest_ticket', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='ticketassociation_dest_ticket', to='app.ticket')),
                ('src_ticket', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='ticketassociation_src_ticket', to='app.ticket')),
            ],
            options={
                'verbose_name': 'link',
                'verbose_name_plural': 'links',
                'db_table': 'ticket_association',
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='relations_in',
            field=models.ManyToManyField(related_name='_app_ticket_relations_in_+', through='app.TicketAssociation', to='app.Ticket', verbose_name='Relations out'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='relations_out',
            field=models.ManyToManyField(related_name='_app_ticket_relations_out_+', through='app.TicketAssociation', to='app.Ticket', verbose_name='Relations out'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='reporter',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_reporter', to=settings.AUTH_USER_MODEL, verbose_name='Reporter'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='resolution',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_resolution', to='app.resolution', verbose_name='Resolution'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='status',
            field=models.ForeignKey(blank=True, default=15, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_status', to='app.status', verbose_name='Status'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='tenant',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_tenant', to='app.tenant'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_type', to='app.type', verbose_name='Type'),
        ),
        migrations.CreateModel(
            name='TenantSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False, editable=False)),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('operator', 'Operator'), ('developer', 'Developer')], max_length=25)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenantsession_tenant', to='app.tenant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenantsession_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'tenant session',
                'verbose_name_plural': 'tenant sessions',
                'db_table': 'tenant_session',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='status',
            name='transitions',
            field=models.ManyToManyField(related_name='_app_status_transitions_+', through='app.Transition', to='app.Status'),
        ),
        migrations.AddField(
            model_name='labelassociation',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labelassociation_ticket', to='app.ticket'),
        ),
        migrations.AddField(
            model_name='commentassociation',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentassociation_ticket', to='app.ticket'),
        ),
        migrations.CreateModel(
            name='BoardColumnAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boardcolumnassociation_column_nr', to='app.boardcolumn')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boardcolumnassociation_status', to='app.status')),
            ],
            options={
                'verbose_name': 'board column association',
                'verbose_name_plural': 'board column associations',
                'db_table': 'board_column_association',
                'ordering': ['column'],
            },
        ),
        migrations.AddField(
            model_name='boardcolumn',
            name='statuses',
            field=models.ManyToManyField(through='app.BoardColumnAssociation', to='app.Status'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('object', models.CharField(max_length=55, null=True)),
                ('object_value', models.PositiveIntegerField(null=True)),
                ('operation', models.CharField(max_length=50, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('content', models.CharField(blank=True, max_length=50, null=True)),
                ('content_value', models.CharField(blank=True, max_length=255, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('url', models.URLField(null=True)),
                ('session', models.CharField(max_length=500, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auditlog_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'audit log',
                'verbose_name_plural': 'audit logs',
                'db_table': 'audit_log',
                'ordering': ['-created'],
            },
        ),
        migrations.AddField(
            model_name='attachmentassociation',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachmentassociation_ticket', to='app.ticket'),
        ),
    ]
