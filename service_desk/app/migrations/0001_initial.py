# Generated by Django 4.0.4 on 2022-05-21 23:36

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0013_group_type'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file', models.FileField(blank=True, upload_to='uploads/attachments/', validators=[django.core.validators.FileExtensionValidator])),
                ('filename', models.CharField(blank=True, max_length=255)),
                ('size', models.IntegerField(blank=True)),
            ],
            options={
                'db_table': 'issue_attachment',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created', models.DateTimeField(blank=True, help_text='Date when issue has been created', verbose_name='Created')),
                ('updated', models.DateTimeField(blank=True, help_text='Date when issue has been recently changed', null=True, verbose_name='Updated')),
                ('author', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'issue_comment',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='CommentAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comment', to='app.comment')),
            ],
            options={
                'db_table': 'comment_association',
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Summarize the issue', max_length=255)),
                ('key', models.CharField(blank=True, max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='The content of the issue', null=True, verbose_name='Description')),
                ('escalated', models.BooleanField(default=False)),
                ('suspended', models.BooleanField(default=False)),
                ('created', models.DateTimeField(help_text='Date when issue has been created')),
                ('updated', models.DateTimeField(blank=True, help_text='Date when issue has been recently changed', null=True)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_assignee', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Issue',
                'verbose_name_plural': 'Issues',
                'db_table': 'issue',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Issue labels',
                'db_table': 'issue_label',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Priority',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('icon', models.FilePathField(path='F:\\Programs\\Repository\\Python\\Private\\GitHub\\service-desk\\service_desk/static/images/priorities')),
            ],
            options={
                'verbose_name_plural': 'Issue priorities',
                'db_table': 'issue_priority',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Resolution',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Issue resolutions',
                'db_table': 'issue_resolution',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SLA',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('reaction_time', models.IntegerField(help_text='Time to reaction in minutes before escalation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(43200)])),
                ('resolve_time', models.IntegerField(help_text='Time to resolve in minutes before escalation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(43200)])),
                ('hour_range', models.CharField(max_length=5)),
            ],
            options={
                'verbose_name_plural': "SLA's",
                'db_table': 'tenant_sla',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('type', models.CharField(choices=[('SD', 'Service Desk'), ('Software', 'Software')], max_length=50)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('color', models.CharField(max_length=7)),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Issue statuses',
                'db_table': 'issue_status',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('icon', models.FilePathField(path='F:\\Programs\\Repository\\Python\\Private\\GitHub\\service-desk\\service_desk/static/images/issuetypes')),
            ],
            options={
                'verbose_name_plural': 'Issue types',
                'db_table': 'issue_type',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('pattern', models.TextField(help_text='XML file to descript workflow')),
            ],
            options={
                'verbose_name_plural': 'Workflows',
                'db_table': 'tenant_workflow',
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('key', models.CharField(blank=True, max_length=50, unique=True)),
                ('count', models.PositiveIntegerField(blank=True, default=0)),
                ('icon', models.FilePathField(path='F:\\Programs\\Repository\\Python\\Private\\GitHub\\service-desk\\service_desk/static/images/tenants/')),
                ('customers_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_customers_group', to='auth.group')),
                ('developers_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_developers_group', to='auth.group')),
                ('operators_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_operators_group', to='auth.group')),
                ('sla', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.sla')),
                ('workflow_developer', models.ForeignKey(help_text='Workflow scheme for Developer space', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_workflow_developer', to='app.workflow')),
                ('workflow_operator', models.ForeignKey(help_text='Workflow scheme for Service Desk space', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_workflow_operator', to='app.workflow')),
            ],
            options={
                'verbose_name_plural': 'Tenants',
                'db_table': 'tenant',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='IssueAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('dest_issue', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_dest_issue', to='app.issue')),
                ('src_issue', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_src_issue', to='app.issue')),
            ],
            options={
                'db_table': 'issue_association',
            },
        ),
        migrations.AddField(
            model_name='issue',
            name='association',
            field=models.ManyToManyField(through='app.IssueAssociation', to='app.issue'),
        ),
        migrations.AddField(
            model_name='issue',
            name='attachments',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_attachment', to='app.attachment'),
        ),
        migrations.AddField(
            model_name='issue',
            name='comments',
            field=models.ManyToManyField(through='app.CommentAssociation', to='app.comment'),
        ),
        migrations.AddField(
            model_name='issue',
            name='label',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_label', to='app.label'),
        ),
        migrations.AddField(
            model_name='issue',
            name='priority',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_priority', to='app.priority'),
        ),
        migrations.AddField(
            model_name='issue',
            name='reporter',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_reporter', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='issue',
            name='resolution',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_resolution', to='app.resolution'),
        ),
        migrations.AddField(
            model_name='issue',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_status', to='app.status'),
        ),
        migrations.AddField(
            model_name='issue',
            name='tenant',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_tenant', to='app.tenant'),
        ),
        migrations.AddField(
            model_name='issue',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_type', to='app.type'),
        ),
        migrations.AddField(
            model_name='commentassociation',
            name='issue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_issue', to='app.issue'),
        ),
    ]
